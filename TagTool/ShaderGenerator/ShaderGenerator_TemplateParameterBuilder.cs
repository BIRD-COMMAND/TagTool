using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TagTool.Shaders;

namespace TagTool.ShaderGenerator
{
    public partial class ShaderGenerator
    {
        class TemplateParameter
        {
            public string Name;
            public byte Size;
            public ShaderParameter.RType Type;

            public TemplateParameter(string _name, ShaderParameter.RType _type, byte _size = 1)
            {
                Name = _name;
                Type = _type;
                Size = _size;
            }
        }

        MultiValueDictionary<object, object> template_parameters = new MultiValueDictionary<object, object>
        {
            {Albedo.Default,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Default,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Default,  new TemplateParameter("albedo_color", ShaderParameter.RType.Vector) },
            {Albedo.Detail_Blend,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Detail_Blend,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Detail_Blend,  new TemplateParameter("detail_map2", ShaderParameter.RType.Sampler) },
            {Albedo.Constant_Color,  new TemplateParameter("albedo_color", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color,  new TemplateParameter("change_color_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color,  new TemplateParameter("primary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color,  new TemplateParameter("secondary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Four_Change_Color,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Four_Change_Color,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Four_Change_Color,  new TemplateParameter("change_color_map", ShaderParameter.RType.Sampler) },
            {Albedo.Four_Change_Color,  new TemplateParameter("primary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Four_Change_Color,  new TemplateParameter("secondary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Four_Change_Color,  new TemplateParameter("tertiary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Four_Change_Color,  new TemplateParameter("quaternary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Three_Detail_Blend,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Three_Detail_Blend,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Three_Detail_Blend,  new TemplateParameter("detail_map2", ShaderParameter.RType.Sampler) },
            {Albedo.Three_Detail_Blend,  new TemplateParameter("detail_map3", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail_Overlay,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail_Overlay,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail_Overlay,  new TemplateParameter("detail_map2", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail_Overlay,  new TemplateParameter("detail_map_overlay", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail,  new TemplateParameter("detail_map2", ShaderParameter.RType.Sampler) },
            {Albedo.Color_Mask,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Color_Mask,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Color_Mask,  new TemplateParameter("color_mask_map", ShaderParameter.RType.Sampler) },
            {Albedo.Color_Mask,  new TemplateParameter("albedo_color", ShaderParameter.RType.Vector) },
            {Albedo.Color_Mask,  new TemplateParameter("albedo_color2", ShaderParameter.RType.Vector) },
            {Albedo.Color_Mask,  new TemplateParameter("albedo_color3", ShaderParameter.RType.Vector) },
            {Albedo.Color_Mask,  new TemplateParameter("neutral_gray", ShaderParameter.RType.Vector) },
            {Albedo.Two_Detail_Black_Point,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail_Black_Point,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Detail_Black_Point,  new TemplateParameter("detail_map2", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color_Anim_Overlay,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color_Anim_Overlay,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color_Anim_Overlay,  new TemplateParameter("change_color_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color_Anim_Overlay,  new TemplateParameter("primary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Anim_Overlay,  new TemplateParameter("secondary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Anim_Overlay,  new TemplateParameter("primary_change_color_anim", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Anim_Overlay,  new TemplateParameter("secondary_change_color_anim", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Chameleon,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Chameleon,  new TemplateParameter("chameleon_color0", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon,  new TemplateParameter("chameleon_color1", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon,  new TemplateParameter("chameleon_color2", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon,  new TemplateParameter("chameleon_color3", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon,  new TemplateParameter("chameleon_color_offset1", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon,  new TemplateParameter("chameleon_color_offset2", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon,  new TemplateParameter("chameleon_fresnel_power", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("change_color_map", ShaderParameter.RType.Sampler) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("primary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("secondary_change_color", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("primary_change_color_anim", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("secondary_change_color_anim", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("chameleon_color0", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("chameleon_color1", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("chameleon_color2", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("chameleon_color3", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("chameleon_color_offset1", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("chameleon_color_offset2", ShaderParameter.RType.Vector) },
            {Albedo.Two_Change_Color_Chameleon,  new TemplateParameter("chameleon_fresnel_power", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_mask_map", ShaderParameter.RType.Sampler) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_color0", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_color1", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_color2", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_color3", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_color_offset1", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_color_offset2", ShaderParameter.RType.Vector) },
            {Albedo.Chameleon_Masked,  new TemplateParameter("chameleon_fresnel_power", ShaderParameter.RType.Vector) },
            {Albedo.Color_Mask_Hard_Light,  new TemplateParameter("base_map", ShaderParameter.RType.Sampler) },
            {Albedo.Color_Mask_Hard_Light,  new TemplateParameter("detail_map", ShaderParameter.RType.Sampler) },
            {Albedo.Color_Mask_Hard_Light,  new TemplateParameter("color_mask_map", ShaderParameter.RType.Sampler) },
            {Albedo.Color_Mask_Hard_Light,  new TemplateParameter("albedo_color", ShaderParameter.RType.Vector) },
            {Bump_Mapping.Standard,  new TemplateParameter("bump_map", ShaderParameter.RType.Sampler) },
            {Bump_Mapping.Detail,  new TemplateParameter("bump_map", ShaderParameter.RType.Sampler) },
            {Bump_Mapping.Detail,  new TemplateParameter("bump_detail_map", ShaderParameter.RType.Sampler) },
            {Bump_Mapping.Detail,  new TemplateParameter("bump_detail_coefficient", ShaderParameter.RType.Vector) },
            {Bump_Mapping.Detail_Masked,  new TemplateParameter("bump_map", ShaderParameter.RType.Sampler) },
            {Bump_Mapping.Detail_Masked,  new TemplateParameter("bump_detail_map", ShaderParameter.RType.Sampler) },
            {Bump_Mapping.Detail_Masked,  new TemplateParameter("bump_detail_mask_map", ShaderParameter.RType.Sampler) },
            {Bump_Mapping.Detail_Masked,  new TemplateParameter("bump_detail_coefficient", ShaderParameter.RType.Vector) },
            {Alpha_Test.Simple,  new TemplateParameter("alpha_test_map", ShaderParameter.RType.Sampler) },
            {Specular_Mask.From_Texture,  new TemplateParameter("specular_mask_texture", ShaderParameter.RType.Sampler) },
            {Specular_Mask.From_Color_Texture,  new TemplateParameter("specular_mask_texture", ShaderParameter.RType.Sampler) },
            {Material_Model.Diffuse_Only,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("diffuse_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("specular_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("specular_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("fresnel_color", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("use_fresnel_color_environment", ShaderParameter.RType.Boolean) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("fresnel_color_environment", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("fresnel_power", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("roughness", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("area_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("analytical_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("environment_map_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("order3_area_specular", ShaderParameter.RType.Boolean) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("use_material_texture", ShaderParameter.RType.Boolean) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("material_texture", ShaderParameter.RType.Sampler) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("g_sampler_cc0236", ShaderParameter.RType.Sampler) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("g_sampler_dd0236", ShaderParameter.RType.Sampler) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("g_sampler_c78d78", ShaderParameter.RType.Sampler) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("albedo_blend_with_specular_tint", ShaderParameter.RType.Boolean) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("albedo_blend", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("analytical_anti_shadow_control", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("rim_fresnel_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("rim_fresnel_color", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("rim_fresnel_power", ShaderParameter.RType.Vector) },
            {Material_Model.Cook_Torrance,  new TemplateParameter("rim_fresnel_albedo_blend", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("diffuse_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("specular_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("normal_specular_power", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("normal_specular_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("glancing_specular_power", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("glancing_specular_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("fresnel_curve_steepness", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("area_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("analytical_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("environment_map_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("order3_area_specular", ShaderParameter.RType.Boolean) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("albedo_specular_tint_blend", ShaderParameter.RType.Vector) },
            {Material_Model.Two_Lobe_Phong,  new TemplateParameter("analytical_anti_shadow_control", ShaderParameter.RType.Vector) },
            {Material_Model.Foliage,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Glass,  new TemplateParameter("diffuse_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("specular_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("fresnel_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("fresnel_curve_steepness", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("fresnel_curve_bias", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("roughness", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("analytical_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("area_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Glass,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Organism,  new TemplateParameter("diffuse_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("diffuse_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("analytical_specular_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("area_specular_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("specular_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("specular_power", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("specular_map", ShaderParameter.RType.Sampler) },
            {Material_Model.Organism,  new TemplateParameter("environment_map_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("environment_map_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("fresnel_curve_steepness", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("rim_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("rim_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("rim_power", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("rim_start", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("rim_maps_transition_ratio", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("ambient_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("ambient_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("occlusion_parameter_map", ShaderParameter.RType.Sampler) },
            {Material_Model.Organism,  new TemplateParameter("subsurface_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("subsurface_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("subsurface_propagation_bias", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("subsurface_normal_detail", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("subsurface_map", ShaderParameter.RType.Sampler) },
            {Material_Model.Organism,  new TemplateParameter("transparence_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("transparence_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("transparence_normal_bias", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("transparence_normal_detail", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("transparence_map", ShaderParameter.RType.Sampler) },
            {Material_Model.Organism,  new TemplateParameter("final_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Organism,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("diffuse_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("specular_coefficient", ShaderParameter.RType.Vector) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("roughness", ShaderParameter.RType.Vector) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("analytical_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("area_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("environment_map_specular_contribution", ShaderParameter.RType.Vector) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("specular_tint", ShaderParameter.RType.Vector) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("order3_area_specular", ShaderParameter.RType.Boolean) },
            {Material_Model.Single_Lobe_Phong,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Car_Paint,  new TemplateParameter("use_material_texture0", ShaderParameter.RType.Boolean) },
            {Material_Model.Car_Paint,  new TemplateParameter("use_material_texture1", ShaderParameter.RType.Boolean) },
            {Material_Model.Car_Paint,  new TemplateParameter("material_texture", ShaderParameter.RType.Sampler) },
            {Material_Model.Car_Paint,  new TemplateParameter("no_dynamic_lights", ShaderParameter.RType.Boolean) },
            {Material_Model.Car_Paint,  new TemplateParameter("g_sampler_cc0236", ShaderParameter.RType.Sampler) },
            {Material_Model.Car_Paint,  new TemplateParameter("g_sampler_dd0236", ShaderParameter.RType.Sampler) },
            {Material_Model.Car_Paint,  new TemplateParameter("g_sampler_c78d78", ShaderParameter.RType.Sampler) },
            {Material_Model.Car_Paint,  new TemplateParameter("bump_detail_map0", ShaderParameter.RType.Sampler) },
            {Material_Model.Car_Paint,  new TemplateParameter("bump_detail_map0_blend_factor", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("diffuse_coefficient0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("specular_coefficient0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("specular_tint0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("fresnel_color0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("fresnel_power0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("albedo_blend0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("roughness0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("area_specular_contribution0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("analytical_specular_contribution0", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("order3_area_specular0", ShaderParameter.RType.Boolean) },
            {Material_Model.Car_Paint,  new TemplateParameter("diffuse_coefficient1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("specular_coefficient1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("specular_tint1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("fresnel_color1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("fresnel_color_environment1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("fresnel_power1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("albedo_blend1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("roughness1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("area_specular_contribution1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("analytical_specular_contribution1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("environment_map_specular_contribution1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("order3_area_specular1", ShaderParameter.RType.Boolean) },
            {Material_Model.Car_Paint,  new TemplateParameter("rim_fresnel_coefficient1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("rim_fresnel_color1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("rim_fresnel_power1", ShaderParameter.RType.Vector) },
            {Material_Model.Car_Paint,  new TemplateParameter("rim_fresnel_albedo_blend1", ShaderParameter.RType.Vector) },
            {Environment_Mapping.Per_Pixel,  new TemplateParameter("environment_map", ShaderParameter.RType.Sampler) },
            {Environment_Mapping.Per_Pixel,  new TemplateParameter("env_tint_color", ShaderParameter.RType.Vector) },
            {Environment_Mapping.Per_Pixel,  new TemplateParameter("env_roughness_scale", ShaderParameter.RType.Vector) },
            {Environment_Mapping.Dynamic,  new TemplateParameter("env_tint_color", ShaderParameter.RType.Vector) },
            {Environment_Mapping.Dynamic,  new TemplateParameter("dynamic_environment_map_0", ShaderParameter.RType.Sampler) },
            {Environment_Mapping.Dynamic,  new TemplateParameter("dynamic_environment_map_1", ShaderParameter.RType.Sampler) },
            {Environment_Mapping.Dynamic,  new TemplateParameter("env_roughness_scale", ShaderParameter.RType.Vector) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("flat_environment_map", ShaderParameter.RType.Sampler) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("env_tint_color", ShaderParameter.RType.Vector) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("flat_envmap_matrix_x", ShaderParameter.RType.Vector) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("flat_envmap_matrix_y", ShaderParameter.RType.Vector) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("flat_envmap_matrix_z", ShaderParameter.RType.Vector) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("hemisphere_percentage", ShaderParameter.RType.Vector) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("env_bloom_override", ShaderParameter.RType.Vector) },
            {Environment_Mapping.From_Flat_Texture,  new TemplateParameter("env_bloom_override_intensity", ShaderParameter.RType.Vector) },
            {Environment_Mapping.Custom_Map,  new TemplateParameter("environment_map", ShaderParameter.RType.Sampler) },
            {Environment_Mapping.Custom_Map,  new TemplateParameter("env_tint_color", ShaderParameter.RType.Vector) },
            {Environment_Mapping.Custom_Map,  new TemplateParameter("env_roughness_scale", ShaderParameter.RType.Vector) },
            {Self_Illumination.Simple,  new TemplateParameter("self_illum_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Simple,  new TemplateParameter("self_illum_color", ShaderParameter.RType.Vector) },
            {Self_Illumination.Simple,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Self_Illumination._3_Channel_Self_Illum,  new TemplateParameter("self_illum_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination._3_Channel_Self_Illum,  new TemplateParameter("channel_a", ShaderParameter.RType.Vector) },
            {Self_Illumination._3_Channel_Self_Illum,  new TemplateParameter("channel_b", ShaderParameter.RType.Vector) },
            {Self_Illumination._3_Channel_Self_Illum,  new TemplateParameter("channel_c", ShaderParameter.RType.Vector) },
            {Self_Illumination._3_Channel_Self_Illum,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Self_Illumination.Plasma,  new TemplateParameter("noise_map_a", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Plasma,  new TemplateParameter("noise_map_b", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Plasma,  new TemplateParameter("color_medium", ShaderParameter.RType.Vector) },
            {Self_Illumination.Plasma,  new TemplateParameter("color_wide", ShaderParameter.RType.Vector) },
            {Self_Illumination.Plasma,  new TemplateParameter("color_sharp", ShaderParameter.RType.Vector) },
            {Self_Illumination.Plasma,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Self_Illumination.Plasma,  new TemplateParameter("alpha_mask_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Plasma,  new TemplateParameter("thinness_medium", ShaderParameter.RType.Vector) },
            {Self_Illumination.Plasma,  new TemplateParameter("thinness_wide", ShaderParameter.RType.Vector) },
            {Self_Illumination.Plasma,  new TemplateParameter("thinness_sharp", ShaderParameter.RType.Vector) },
            {Self_Illumination.From_Diffuse,  new TemplateParameter("self_illum_color", ShaderParameter.RType.Vector) },
            {Self_Illumination.From_Diffuse,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Self_Illumination.Illum_Detail,  new TemplateParameter("self_illum_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Illum_Detail,  new TemplateParameter("self_illum_detail_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Illum_Detail,  new TemplateParameter("self_illum_color", ShaderParameter.RType.Vector) },
            {Self_Illumination.Illum_Detail,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Self_Illumination.Meter,  new TemplateParameter("meter_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Meter,  new TemplateParameter("meter_color_off", ShaderParameter.RType.Vector) },
            {Self_Illumination.Meter,  new TemplateParameter("meter_color_on", ShaderParameter.RType.Vector) },
            {Self_Illumination.Meter,  new TemplateParameter("meter_value", ShaderParameter.RType.Vector) },
            {Self_Illumination.Self_Illum_Times_Diffuse,  new TemplateParameter("self_illum_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Self_Illum_Times_Diffuse,  new TemplateParameter("self_illum_color", ShaderParameter.RType.Vector) },
            {Self_Illumination.Self_Illum_Times_Diffuse,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Self_Illumination.Self_Illum_Times_Diffuse,  new TemplateParameter("primary_change_color_blend", ShaderParameter.RType.Vector) },
            {Self_Illumination.Simple_With_Alpha_Mask,  new TemplateParameter("self_illum_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Simple_With_Alpha_Mask,  new TemplateParameter("self_illum_color", ShaderParameter.RType.Vector) },
            {Self_Illumination.Simple_With_Alpha_Mask,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Self_Illumination.Simple_Four_Change_Color,  new TemplateParameter("self_illum_map", ShaderParameter.RType.Sampler) },
            {Self_Illumination.Simple_Four_Change_Color,  new TemplateParameter("self_illum_color", ShaderParameter.RType.Vector) },
            {Self_Illumination.Simple_Four_Change_Color,  new TemplateParameter("self_illum_intensity", ShaderParameter.RType.Vector) },
            {Parallax.Simple,  new TemplateParameter("height_map", ShaderParameter.RType.Sampler) },
            {Parallax.Simple,  new TemplateParameter("height_scale", ShaderParameter.RType.Vector) },
            {Parallax.Interpolated,  new TemplateParameter("height_map", ShaderParameter.RType.Sampler) },
            {Parallax.Interpolated,  new TemplateParameter("height_scale", ShaderParameter.RType.Vector) },
            {Parallax.Simple_Detail,  new TemplateParameter("height_map", ShaderParameter.RType.Sampler) },
            {Parallax.Simple_Detail,  new TemplateParameter("height_scale", ShaderParameter.RType.Vector) },
            {Parallax.Simple_Detail,  new TemplateParameter("height_scale_map", ShaderParameter.RType.Sampler) },
            {Distortion.On,  new TemplateParameter("distort_map", ShaderParameter.RType.Sampler) },
            {Distortion.On,  new TemplateParameter("distort_scale", ShaderParameter.RType.Vector) },
            {Distortion.On,  new TemplateParameter("soft_fresnel_enabled", ShaderParameter.RType.Boolean) },
            {Distortion.On,  new TemplateParameter("soft_fresnel_power", ShaderParameter.RType.Vector) },
            {Distortion.On,  new TemplateParameter("soft_z_enabled", ShaderParameter.RType.Boolean) },
            {Distortion.On,  new TemplateParameter("soft_z_range", ShaderParameter.RType.Vector) },
            {Distortion.On,  new TemplateParameter("depth_map", ShaderParameter.RType.Sampler) },
        };

    }; 
}
